import { createSlice } from "@reduxjs/toolkit";

// Initial state for the posts slice
const initialState = {
  posts: [], // This is where your array of posts will be stored
};

// Create a slice for posts
const postsSlice = createSlice({
  name: "posts",
  initialState,
  reducers: {
    // Action to set the posts array
    setPosts: (state, action) => {
      state.posts = action.payload;
    },
    // Action to add a single post to the array
    addPost: (state, action) => {
      state.posts.push(action.payload);
    },
    // Action to remove a post by its index
    removePost: (state, action) => {
      state.posts.splice(action.payload, 1);
    },
    // Action to clear all posts
    clearPosts: (state) => {
      state.posts = [];
    },
    updatePost: (state, action) => {
      const index = state.posts.findIndex(post => post.id === action.payload.id);
      if (index !== -1) {
        state.posts[index] = { ...state.posts[index], ...action.payload };
      }
    },
    updatePostUserField: (state, action) => {
      const { field, value } = action.payload;
      const index = state.posts.findIndex(post => post.id === value.postid);
      if (index !== -1) {
        // Update the 'users' field of the specified post
        state.posts[index] = {
          ...state.posts[index], // Spread the existing post
          [field]: { // Use computed property to dynamically update the field
            ...state.posts[index][field], // Spread existing 'users' (or the targeted field)
            ...value // Merge the new values
          }
        };
      }
    }
  },
});

// Export the actions generated by createSlice
export const { setPosts, addPost, removePost, clearPosts, updatePost, updatePostUserField  } = postsSlice.actions;

// Export the reducer to be used in the store
export default postsSlice.reducer;

